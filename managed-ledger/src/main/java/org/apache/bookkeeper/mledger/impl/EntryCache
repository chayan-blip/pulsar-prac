/**
 * Copyright 2016 Yahoo Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.bookkeeper.mledger.impl;

import org.apache.bookkeeper.client.LedgerHandle;
import org.apache.bookkeeper.mledger.AsyncCallbacks.ReadEntriesCallback;
import org.apache.bookkeeper.mledger.AsyncCallbacks.ReadEntryCallback;
import org.apache.bookkeeper.mledger.util.Pair;

/**
 * Cache of entries used by a single ManagedLedger. An ENtryCache is compared to other EntryCache instances using their
 * size (the memory that is occupied by each of them)
 */

 public interface EntryCache extends Comparable<EntryCache> {
	/**
	 * @return the name of the cache
	 */
	String getName();

	/**
	 * Insert an entry in the cache.
	 * <p>
	 * If the overall limit have been reached, this will trigger the eviction of other entries, possibly from other
	 * EntryCache instances
	 * 
	 * @param entry
	 * 			the entry to be cached
	 * @return whether the entry was inserted in cache
	 */
	boolean insert(EntryImpl entry);

	/**
	 * Remove from the cache all entries related to the ledger up to the lastPosition included.
	 * 
	 * @param lastPosition
	 * 			the position of the last entry to be invalidated (inclusive)
	 */
	void invalidateEntries(PositionImpl lastPosition);
 }